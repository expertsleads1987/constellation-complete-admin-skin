dateChart = ""
expensesChart = ""
incomesChart = ""
selectedYear = ""
dataTable = ""

@setSelectedYear = (year) ->
  selectedYear = year

#Formatter for the date chart
recordsFormatter = () ->
  position = this.point.x
  
  income = dateChart.series[0].data[this.point.x].y
  expense = dateChart.series[1].data[this.point.x].y
  record = income - expense
  
  text = '<b>Revenus : </b>' + income + '$<br/>'
  text += '<b>Dépenses : </b>' + expense + '$<br/>'
  text += '<b>Total : </b>' + record + '$'
  text

#Formatter for the pie charts
categoryFormatter = (chart) ->
  income = chart.point.y
  category = chart.point.name
  
  text = '<b>' + category + ' : </b>' + income + '$'
  
#return the targe url with dates
prefixUrl = (dateStart, dateEnd) ->
  "users/amounts.js?stats[date_start]=" + dateStart + 
  "&stats[date_end]="+dateEnd

#refresh the pie charts
refreshPieChart = (oldData, newData, serie) ->
  lengthOld = oldData.length
  lengthNew = newData.length
  
  #refresh all the categories already present and add the news
  find = false
  i = 0
  while i < lengthNew
    j = 0
    while j < lengthOld
      #update the value if it find the right category
      if newData[i][0] == oldData[j].name
        oldData[j].update(newData[i][1])
        find = true
        break
      j++
      
    #add a new point if the category wasn't found
    if !find
      serie.addPoint(newData[i])
    find = false
    i++
    
  #delete all old categories
  j = lengthOld
  while j >= 0
    i = 0
    while i < lengthNew
      if oldData[j] && newData[i][0] == oldData[j].name
        find = true
        break
      i++
    if !find && oldData[j]
      oldData[j].remove()
    find = false 
    j--
  

#called when the pie charts is click
pieChartClick = (chart) ->    
  refreshDataTable()
 
#get the start date
getDateStart = () ->
  selectedPoints = dateChart.getSelectedPoints()
  if selectedPoints.length == 0
    dateStart = selectedYear + "-01-01"
  else
    month = selectedPoints[0].x + 1
    dateStart = selectedYear + "-"+month+"-1"
  dateStart
 
#get the end date
getDateEnd = () ->
  selectedPoints = dateChart.getSelectedPoints()
  if selectedPoints.length == 0
    dateEnd = selectedYear + "-12-31"
  else
    month = selectedPoints[0].x + 1
    dd = new Date(selectedYear, month, 0)
    dateEnd = selectedYear + "-"+month+"-"+dd.getDate()
  dateEnd
  

#called when the date chart is click                     
recordsClick = (chart, incomesChartSeries, expensesChartSeries) ->
  dateStart = getDateStart()
  dateEnd = getDateEnd()
  
  strCategory = "&stats[options[group]]=category"
  
  #refresh data for expense
  $.ajax({
    url: prefixUrl(dateStart, dateEnd)+strCategory+
         "&stats[options[type]]=expenses"
    context: document.body
    success: (data) ->
      refreshPieChart(expensesChartSeries[0].data, 
                      data, 
                      expensesChartSeries[0])
  })
  
  #refresh data for incomes
  $.ajax({
    url: prefixUrl(dateStart, dateEnd)+strCategory+
         "&stats[options[type]]=incomes"
    context: document.body
    success: (data) ->
      refreshPieChart(incomesChartSeries[0].data, 
                      data, 
                      incomesChartSeries[0])
  })
  
  #refresh data for the result table
  refreshDataTable()

#refresh data for the result table
refreshDataTable = () ->
  dateStart = getDateStart()
  dateEnd = getDateEnd()
  url = "users/records"+
        "?search[date_greater_than_or_equal_to]="+dateStart+
        "&search[date_less_than_or_equal_to]="+dateEnd
        
  charts = [incomesChart, expensesChart]
  $.each( charts, (i, chart) -> 
    selectedPoints = chart.getSelectedPoints()
    if selectedPoints.length != 0
      category = selectedPoints[0].name
      url += "&search[category_label_equals]="+category
  )
  
  if dataTable == ""
    dataTable = loadDataTable(url)
  else
    dataTable.fnSettings().sAjaxSource = url;
    dataTable.fnDraw()
  
#Initialize a pie chart
getPieChart = (type) ->
  dateStart = getDateStart()
  dateEnd = getDateEnd()
  
  chart = new Highcharts.Chart({
    chart:
      renderTo: 'container_' + type,
      defaultSeriesType: 'pie'
    tooltip:
      formatter:  () ->
        categoryFormatter(this)
    plotOptions:
      pie:
        cursor: 'pointer'
        point:
          events:
            click: () ->
              selectCategory(this)
              pieChartClick(chart)
    series: [{
       type: 'pie'
    }]
  })
  
#select a category and close others
selectCategory = (point) ->
  selectedOld = point.selected
  charts = [incomesChart, expensesChart]
  $.each(charts, (i, chart) ->
    selectedPoints = chart.getSelectedPoints()
    $.each(selectedPoints, (i, selectedPoint) ->
      selectedPoint.select(false)
    )
  )
  if !selectedOld
    point.select(true) 
  
  
#load the charts
@loadCharts = () ->
  
  #refresh data for incomes
  loadChart(dateChart.series[0], 
            "&stats[options[period]]=month&stats[options[type]]=incomes")
  
  #refresh data for expenses
  loadChart(dateChart.series[1], 
            "&stats[options[period]]=month&stats[options[type]]=expenses")
  
  #refresh data for incomes category
  loadChart(incomesChart.series[0], 
            "&stats[options[group]]=category&stats[options[type]]=incomes")
  
  #refresh data for expenses category  
  loadChart(expensesChart.series[0], 
            "&stats[options[group]]=category&stats[options[type]]=expenses")
            
  refreshDataTable()
  
#load a chart with a given url
loadChart = (serie, suffixUrl, globalData) ->
  dateStart = getDateStart()
  dateEnd = getDateEnd()
  $.ajax({
    url: prefixUrl(dateStart, dateEnd) + suffixUrl
    context: document.body
    success: (data) ->
      serie.setData(data)
  })
  
#change the current year showed
@changeYear = (year) ->

  selectedPoints = dateChart.getSelectedPoints()
  $.each(selectedPoints, (i, selectedPoint) ->
    selectedPoint.select(false)
  )
  
  incomesChart.setTitle({text: 'Revenus par catégories pour ' + year}); 
  expensesChart.setTitle({text: 'Dépenses par catégories pour ' + year}); 
  dateChart.setTitle({text: 'Revenus et dépenses pour ' + year}); 
  
  selectedYear = year
  loadCharts()

#called when the page is ready
$(document).ready ->
  #initialize the date chart
  dateChart = new Highcharts.Chart({
    chart:
      renderTo: 'container_year',
      defaultSeriesType: 'area'
    colors: ['#55BF3B', '#BF2222'],
    tooltip:
      formatter: recordsFormatter
    yAxis:
      title: 
        text: ''
    xAxis:
      categories: <%= I18n.t('month_names', :scope => 'date').compact.inspect %>
    plotOptions:
      series:
        point:
          events:
            click: () -> 
              this.select(!this.selected)
              recordsClick(dateChart,
                            incomesChart.series, 
                            expensesChart.series)
    series: [
      {
        name: 'Bénéfices'
      }, {
        name: 'Dépenses'
      }
    ]
  })
  
  #initialize the incomes chart
  incomesChart = getPieChart( 'incomes')
  
  #initialize the expenses chart
  expensesChart = getPieChart( 'expenses')

